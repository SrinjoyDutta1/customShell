/*
 * CS252: Systems Programming
 * Purdue University
 * Example that shows how to read one line with simple editing
 * using raw terminal.
 */

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <stdbool.h>

#define MAX_BUFFER_LINE 2048
#define HISTORY_SIZE 2048

extern void tty_raw_mode(void);

// Buffer where line is stored
int line_length;
char line_buffer[MAX_BUFFER_LINE];
int right_length;
char right_buffer[MAX_BUFFER_LINE];

// Simple history array
// This history does not change. 
// Yours have to be updated.
int history_index = -1;
char * history [HISTORY_SIZE] = {0};
int lengthHistory = 0;

void read_line_print_usage()
{
  char * usage = "\n"
    " ctrl-?       Print usage\n"
    " Backspace    Deletes last character\n"
    " up arrow     See last command in the history\n";

  write(1, usage, strlen(usage));
}

/* 
 * Input a line with some basic editing.
 */
char * read_line() {

  // Set terminal in raw mode
  tty_raw_mode();

  line_length = 0;
  right_length = 0;


  // Read one line until enter is typed
  while (1) {

    // Read one character in raw mode.
    char ch;
    read(0, &ch, 1);
    if (ch>=32 && ch != 127) {
      // It is a printable character. 

      // Do echo
      write(1,&ch,1);

      // If max number of character reached return.
      if (line_length==MAX_BUFFER_LINE-2) break; 

      // add char to buffer.
      line_buffer[line_length]=ch;
      line_length++;

      if(right_length != 0) {
        for(int i = right_length - 1; i >= 0; i--) {
          char chosen = right_buffer[i];
          write(1, &chosen, 1);
        }
      }
      for(int i = 0; i < right_length; i++) {
        char c = 8;
        write(1, &c, 1);
      }
    }
    else if (ch==10) {
      // <Enter> was typed. Return line
      
      // Print newline
      
      if(right_length != 0) {
        for(int i = right_length - 1; i >= 0; i--) {
          line_buffer[line_length] = right_buffer[i];
          line_length++;
        }
      }
      

      if(line_length != 0) {
        
        int curi;
        if(lengthHistory != HISTORY_SIZE) {
          curi = lengthHistory;
        }
        else {
          free(history[HISTORY_SIZE - 1]);
          curi = lengthHistory - 1;
        }
        
       //shift the history array back by one 
        for(int i = curi; i > 0; i--) {
          history[i] = history[i-1];
        }
        //add new to history
        history[0] = (char *) malloc(line_length + 1);
        strncpy(history[0], line_buffer, line_length);
        history[0][line_length] = '\0';
        history_index = -1;
        lengthHistory+=1;
      }
      right_length = 0;
      write(1, &ch, 1);
      break;
    }
    else if (ch == 31) {
      // ctrl-?
      read_line_print_usage();
      line_buffer[0]=0;
      break;
    }


    else if (ch == 4) {
      
      if (right_length == 0) continue;

      right_length--;

      for (int i = right_length - 1 ; i >= 0 ; i--) {
        char c = right_buffer[i];
        write(1, &c, 1);
      }
      char ch = ' ';
      write(1, &ch, 1);
      for (int i = 0 ; i <= right_length; i++) {
        char c = 8;
        write(1, &c, 1);
      }
    }

    else if (ch == 1) {
      int temp = line_length;
      for (int i = 0 ; i < temp ; i++) {
        char c = 8;
        write(1, &c, 1);
        right_buffer[right_length] = line_buffer[line_length - 1];
        right_length++;
        line_length--;
      }
    }

    else if (ch == 5) {
      for (int i = right_length - 1 ; i >= 0 ; i--) {
        write(1, "\033[1C", 5);
        line_buffer[line_length] = right_buffer[right_length - 1];
        right_length--;
        line_length++;
      }
    }

    else if (ch == 8 || ch == 127) {
      // <backspace> was typed. Remove previous character read.

      // Go back one character
      ch = 8;
      write(1,&ch,1);

      for(int i = right_length - 1; i >= 0; i--) {
        write(1, &right_buffer[i], 1);
      }

      // Write a space to erase the last character read
      ch = ' ';
      write(1,&ch,1);

      // Go back one character
      for(int i = 0; i <= right_length; i++) {
        ch = 8;
        write(1,&ch,1);
      }

    }
    else if (ch==27) {
      // Escape sequence. Read two chars more
      //
      // HINT: Use the program "keyboard-example" to
      // see the ascii code for the different chars typed.
      //
      char ch1; 
      char ch2;
      read(0, &ch1, 1);
      read(0, &ch2, 1);
      if (ch1==91) {
        if(ch2 == 65 || ch2 == 66) {
  // Up arrow  or down arrow. Print next line in history.

  // Erase old line
  // Print backspaces
  bool uparrow = (ch2 == 65);
  int i = 0;
  for (i =0; i < line_length; i++) {
    ch = 8;
    write(1,&ch,1);
  }
  
  if(!uparrow) {
  
  
    if(history_index == -1) {
      continue;
    } 
    history_index--;
    
  } else {
    history_index = history_index % lengthHistory;
    history_index++;
  }
  
  // Print spaces on top
  for (i =0; i < line_length; i++) {
    ch = ' ';
    write(1,&ch,1);
  }


  // Print backspaces
  for (i =0; i < line_length; i++) {
    ch = 8;
    write(1,&ch,1);
  }
right_length = 0;
if(history_index > -1) {
  // Copy line from history

  strcpy(line_buffer, history[history_index]);
  line_length = strlen(line_buffer);


 // echo line
  write(1, line_buffer, line_length);
  }
  else {
    line_length = 0;
  }
      }
      else if (ch2 == 68) {
        if(line_length == 0) continue;
        ch = 8;
        write(1, &ch, 1);
        right_buffer[right_length] = line_buffer[line_length - 1];
        right_length++;
        line_length--;
      }
      else if(ch2 == 67) {
        if(right_length == 0) continue;
        write(1, "\033[1C", 5);
        line_buffer[line_length] = right_buffer[right_length - 1];
        right_length--;
        line_length++;
      } else if(ch2 == 51) {
        char ch3;
        read(0, &ch3, 1);
        if(ch3 == 126) {
          
          if (right_length == 0) continue;

          right_length--;

          for (int i = right_length - 1 ; i >= 0 ; i--) {
            char c = right_buffer[i];
            write(1, &c, 1);
          }
          char ch = ' ';
          write(1, &ch, 1);
          for (int i = 0 ; i <= right_length; i++) {
            char c = 8;
            write(1, &c, 1);
          }
        }
      }
    }
      
    }

  }

  // Add eol and null char at the end of string
  line_buffer[line_length]=10;
  line_length++;
  line_buffer[line_length]=0;

  return line_buffer;
}

